package lib.Mitsugaru.SQLibrary;

import junit.framework.TestCase;

/**
 * The class <code>SQLiteTest</code> contains tests for the class {@link
 * <code>SQLite</code>}
 *
 * @pattern JUnit Test Case
 *
 * @generatedBy CodePro at 1/28/12 10:13 PM
 *
 * @author Tokume
 *
 * @version $Revision$
 */
public class SQLiteTest extends TestCase {

	/**
	 * Construct new test instance
	 *
	 * @param name the test name
	 */
	public SQLiteTest(String name) {
		super(name);
	}

	/**
	 * Run the void writeError(String, boolean) method test
	 */
	public void testWriteError() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String toWrite = null;
		boolean severe = false;
		// This class does not have a public, no argument constructor,
		// so the writeError() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the Connection open() method test
	 */
	public void testOpen() {
		fail("Newly generated method - fix or disable");
		// add test code here
		// This class does not have a public, no argument constructor,
		// so the open() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the void close() method test
	 */
	public void testClose() {
		fail("Newly generated method - fix or disable");
		// add test code here
		// This class does not have a public, no argument constructor,
		// so the close() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the Connection getConnection() method test
	 */
	public void testGetConnection() {
		fail("Newly generated method - fix or disable");
		// add test code here
		// This class does not have a public, no argument constructor,
		// so the getConnection() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the boolean checkConnection() method test
	 */
	public void testCheckConnection() {
		fail("Newly generated method - fix or disable");
		// add test code here
		// This class does not have a public, no argument constructor,
		// so the checkConnection() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the ResultSet select(String) method test
	 */
	public void testSelect() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String query = null;
		// This class does not have a public, no argument constructor,
		// so the select() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the void retryQuery(String) method test
	 */
	public void testRetryQuery() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String query = null;
		// This class does not have a public, no argument constructor,
		// so the retryQuery() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the void standardQuery(String) method test
	 */
	public void testStandardQuery() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String query = null;
		// This class does not have a public, no argument constructor,
		// so the standardQuery() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the boolean createTable(String) method test
	 */
	public void testCreateTable() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String query = null;
		// This class does not have a public, no argument constructor,
		// so the createTable() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the boolean checkTable(String) method test
	 */
	public void testCheckTable() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String table = null;
		// This class does not have a public, no argument constructor,
		// so the checkTable() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the boolean wipeTable(String) method test
	 */
	public void testWipeTable() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String table = null;
		// This class does not have a public, no argument constructor,
		// so the wipeTable() method can not be tested
		assertTrue(false);
	}

	/**
	 * Run the ResultSet retryResult(String) method test
	 */
	public void testRetryResult() {
		fail("Newly generated method - fix or disable");
		// add test code here
		String query = null;
		// This class does not have a public, no argument constructor,
		// so the retryResult() method can not be tested
		assertTrue(false);
	}
}

/*$CPS$ This comment was generated by CodePro. Do not edit it.
 * patternId = com.instantiations.assist.eclipse.pattern.testCasePattern
 * strategyId = com.instantiations.assist.eclipse.pattern.testCasePattern.junitTestCase
 * additionalTestNames = 
 * assertTrue = false
 * callTestMethod = true
 * createMain = false
 * createSetUp = false
 * createTearDown = false
 * createTestFixture = false
 * createTestStubs = true
 * methods = 
 * package = lib.Mitsugaru.SQLibrary
 * package.sourceFolder = twoDotFiveD/src/test/java
 * superclassType = junit.framework.TestCase
 * testCase = SQLiteTest
 * testClassType = lib.Mitsugaru.SQLibrary.SQLite
 */